package com.depromeet.mock;

import com.depromeet.exception.NotFoundException;
import com.depromeet.image.domain.Image;
import com.depromeet.image.domain.ImageUploadStatus;
import com.depromeet.image.port.out.persistence.ImagePersistencePort;
import com.depromeet.type.image.ImageErrorType;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakeImageRepository implements ImagePersistencePort {
    private Long imageAutoGeneratedId = 0L;
    private List<Image> data = new ArrayList<>();

    @Override
    public Long save(Image image) {
        if (image.getId() == null || image.getId() == 0) {
            Image newImage =
                    Image.builder()
                            .id(++imageAutoGeneratedId)
                            .imageName(image.getImageName())
                            .originImageName(image.getOriginImageName())
                            .imageUrl(image.getImageUrl())
                            .imageUploadStatus(image.getImageUploadStatus())
                            .memory(image.getMemory().isPresent() ? image.getMemory().get() : null)
                            .build();
            data.add(newImage);
            return newImage.getId();
        } else {
            data.removeIf(item -> item.getId().equals(image.getId()));
            data.add(image);
            return image.getId();
        }
    }

    @Override
    public List<Image> saveAll(List<Image> images) {
        List<Image> savedImages = new ArrayList<>();
        for (Image image : images) {
            if (image.getId() == null || image.getId() == 0) {
                Image newImage =
                        Image.builder()
                                .id(++imageAutoGeneratedId)
                                .imageName(image.getImageName())
                                .originImageName(image.getOriginImageName())
                                .imageUrl(image.getImageUrl())
                                .imageUploadStatus(image.getImageUploadStatus())
                                .memory(
                                        image.getMemory().isPresent()
                                                ? image.getMemory().get()
                                                : null)
                                .build();
                data.add(newImage);
                savedImages.add(newImage);
            } else {
                data.removeIf(item -> item.getId().equals(image.getId()));
                data.add(image);
                savedImages.add(image);
            }
        }
        return savedImages;
    }

    @Override
    public void updateByImageIds(List<Long> imageIds) {
        List<Image> images =
                data.stream().filter(image -> !imageIds.contains(image.getId())).toList();
        if (!images.isEmpty()) throw new NotFoundException(ImageErrorType.NOT_FOUND);

        data.stream()
                .filter(image -> imageIds.contains(image.getId()))
                .forEach(Image::updateHasUploaded);
    }

    @Override
    public Optional<Image> findById(Long id) {
        return data.stream().filter(image -> image.getId().equals(id)).findAny();
    }

    @Override
    public List<Image> findAllByMemoryId(Long memoryId) {
        return data.stream()
                .filter(
                        image ->
                                image.getMemory().isPresent()
                                        && image.getMemory().get().getId().equals(memoryId))
                .toList();
    }

    @Override
    public List<Image> findAllByMemoryIdAndHasUploaded(Long memoryId) {
        return data.stream()
                .filter(
                        image ->
                                image.getMemory().isPresent()
                                        && image.getMemory().get().getId().equals(memoryId)
                                        && image.getImageUploadStatus()
                                                .equals(ImageUploadStatus.UPLOADED))
                .toList();
    }

    @Override
    public List<Image> findImageByIds(List<Long> ids) {
        return data.stream().filter(image -> ids.contains(image.getId())).toList();
    }

    @Override
    public void deleteById(Long id) {
        data.removeIf(image -> image.getId().equals(id));
    }

    @Override
    public void deleteAllByIds(List<Long> ids) {
        data.removeIf(image -> ids.contains(image.getId()));
    }

    @Override
    public void deleteAllByMemoryId(Long memoryId) {
        data.removeIf(
                image ->
                        image.getMemory().isPresent()
                                && image.getMemory().get().getId().equals(memoryId));
    }
}
